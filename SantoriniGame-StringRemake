import java.util.ArrayList;

public class SantoriniGame {

	private String[][] board = new String[5][5];
	private Worker[] workers = { new Worker("w11"), new Worker("w12"), new Worker("w21"), new Worker("w22") };

	public SantoriniGame() {
		board = new String[5][5];

		for (int row = 0; row < board.length; row++) {
			for (int col = 0; col < board[row].length; col++)
				board[row][col] = "";
		}

		workers = new Worker[4];

		workers[0] = new Worker("w11");
		workers[1] = new Worker("w12");
		workers[2] = new Worker("w21");
		workers[3] = new Worker("w22");
	}

	public String[][] getBoard() {
		return board;
	}

	public Worker[] getWorkers() {
		return workers;
	}

	public void setWorkers(Worker[] newWorkers) {
		for (int i = 0; i < workers.length; i++) {
			workers[i] = newWorkers[i];
		}
	}

	public String toString() {
		String rep = "#### 0 ####### 1 ####### 2 ####### 3 ####### 4 ####"; // rep == representation
		rep += "\n";

		for (int row = 0; row < board.length; row++) {
			rep += row + " ";
			for (int col = 0; col < board[row].length; col++) {
				String block = "";
				if (board[row][col].equalsIgnoreCase("")) {
					block += "";
				} else if (board[row][col].equalsIgnoreCase("b")) {
					block += "B";
				} else if (board[row][col].equalsIgnoreCase("bb")) {
					block += "BB";
				} else if (board[row][col].equalsIgnoreCase("bbb"))
					block += "BBB";
				else if (board[row][col].equalsIgnoreCase("bbbd"))
					block += "BBBD";

				for (int i = 0; i < workers.length; i++) {
					if (workers[i].getPositionX() == row && workers[i].getPositionY() == col) {
						block += workers[i].getName();
					}
				}

				for (@SuppressWarnings("unused")
				int i = 0; block.length() < 7; i++) { // Just for aesthetics
					block += " ";
				}

				if (col != board[row].length - 1)
					rep += block + " | ";
				else
					rep += block + " " + row;
			}

			if (row < board.length - 1)
				rep += "\n" + "#-------------------------------------------------#";
			rep += "\n";
		}

		rep += "#### 0 ####### 1 ####### 2 ####### 3 ####### 4 ####";
		return rep;
	}

	public boolean build(int positionX, int positionY) {

		for (int i = 0; i < workers.length; i++) { // To check if a worker occupies the space
			if (workers[i].getPositionX() == positionX && workers[i].getPositionY() == positionY) {
				return false;
			}
		}

		if (board[positionX][positionY].equalsIgnoreCase("")) {
			board[positionX][positionY] = "B";
			return true;
		} else if (board[positionX][positionY].equalsIgnoreCase("b")) {
			board[positionX][positionY] = "BB";
			return true;
		} else if (board[positionX][positionY].equalsIgnoreCase("bb")) {
			board[positionX][positionY] = "BBB";
			return true;
		} else if (board[positionX][positionY].equalsIgnoreCase("bbb")) {
			board[positionX][positionY] = "BBBD";
			return true;
		} else
			return false;
	}

	public boolean hasWon() {

		for (int i = 0; i < workers.length; i++) {
			int posX = workers[i].getPositionX();
			int posY = workers[i].getPositionY();
			if (board[posX][posY].equalsIgnoreCase("bbb"))
				return true;
		}

		return false;
	}

	public boolean isTrapped(int i) {
		int posX = workers[i].getPositionX();
		int posY = workers[i].getPositionY();

		ArrayList<Integer> neighbours = getNeighbours(posX, posY);

		ArrayList<Boolean> move = new ArrayList<>();

		for (int index = 0; index < neighbours.size(); index += 2) {
			if (!board[neighbours.get(index)][neighbours.get(index + 1)].equalsIgnoreCase("bbbd")
					&& board[neighbours.get(index)][neighbours.get(index + 1)]
							.length() <= board[workers[i].getPositionX()][workers[i].getPositionY()].length() + 1) {

				boolean noWorker = true;

				for (int j = 0; j < workers.length; j++) {
					if (workers[j].getPositionX() == neighbours.get(index)
							&& workers[j].getPositionY() == neighbours.get(index + 1)) {
						noWorker = false;
						break;
					}
				}

				if (noWorker) {
					move.add(true);
				} else
					move.add(false);

			} else
				move.add(false);
		}

		for (int j = 0; j < move.size(); j++) {
			if (move.get(j))
				return false;
		}

		return true;
	}

	public void reset() {
		board = new String[5][5];

		for (int row = 0; row < board.length; row++) {
			for (int col = 0; col < board[row].length; col++)
				board[row][col] = "";
		}

		workers = new Worker[4];

		workers[0] = new Worker("w11");
		workers[1] = new Worker("w12");
		workers[2] = new Worker("w21");
		workers[3] = new Worker("w22");
	}

	// Additional methods for checking neighbours to use in isTrapper()

	public ArrayList<Integer> getNeighbours(int posX, int posY) {
		ArrayList<Integer> neighbors = new ArrayList<>();

		if (isCabin(posX, posY)) {
			if (isCabin(posX + 1, posY)) {
				neighbors.add(posX + 1);
				neighbors.add(posY);
			}
			if (isCabin(posX - 1, posY)) {
				neighbors.add(posX - 1);
				neighbors.add(posY);
			}
			if (isCabin(posX, posY + 1)) {
				neighbors.add(posX);
				neighbors.add(posY + 1);
			}
			if (isCabin(posX, posY - 1)) {
				neighbors.add(posX);
				neighbors.add(posY - 1);
			}
			if (isCabin(posX - 1, posY + 1)) {
				neighbors.add(posX - 1);
				neighbors.add(posY + 1);
			}
			if (isCabin(posX + 1, posY - 1)) {
				neighbors.add(posX + 1);
				neighbors.add(posY - 1);
			}
			if (isCabin(posX + 1, posY + 1)) {
				neighbors.add(posX + 1);
				neighbors.add(posY + 1);
			}
			if (isCabin(posX - 1, posY - 1)) {
				neighbors.add(posX - 1);
				neighbors.add(posY - 1);
			}
		}

		return neighbors;
	}

	public boolean isCabin(int i, int j) {
		boolean flag = false;
		if (i >= 0 && i < board.length && j >= 0 && j < board[i].length) {
			flag = true;
		}
		return flag;
	}

}

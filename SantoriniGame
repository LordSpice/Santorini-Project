
public class SantoriniGame {

	private SantoriniGame game;
	private int[][] board = new int[5][5]; // Changed to int for easier future coding
	private Worker[] workers = { new Worker("w11"), new Worker("w12"), new Worker("w21"), new Worker("w22") };

	public SantoriniGame() {
		board = new int[5][5];

		for (int row = 0; row < board.length; row++) {
			for (int col = 0; col < board[row].length; col++)
				board[row][col] = 0;
		}

		workers = new Worker[4];

		workers[0] = new Worker("w11");
		workers[1] = new Worker("w12");
		workers[2] = new Worker("w21");
		workers[3] = new Worker("w22");
	}

	public int[][] getBoard() {
		return board;
	}

	public Worker[] getWorkers() {
		return workers;
	}

	public String toString() {
		String rep = "__________________________________"; // rep == representation
		rep += "\n";

		for (int row = 0; row < board.length; row++) { // Edit
			for (int col = 0; col < board[row].length; col++) { // Edit
				String block = "";

				if (board[row][col] == 0)
					block += "";
				else if (board[row][col] == 1)
					block += "B";
				else if (board[row][col] == 2)
					block += "BB";
				else if (board[row][col] == 3)
					block += "BBB";
				else if (board[row][col] == 4)
					block = "BBBD";

				for (int i = 0; i < workers.length; i++) {
					if (workers[i].getPositionX() == row && workers[i].getPositionY() == col) {
						block += workers[i].getName();
					}
				}

				rep += " | " + block + " | ";
			}

			rep += "\n";
		}

		rep += "__________________________________";
		return rep;
	}

	public boolean build(int positionX, int positionY) { // Should the method build as well?

		for (int i = 0; i < workers.length; i++) { // To check if a worker occupies the space
			if (workers[i].getPositionX() == positionX && workers[i].getPositionY() == positionY) {
				// System.out.println(i); // Test
				return false;
			}
		}

		if (board[positionX][positionY] < 4) { // To check if the tile is no more than three level
			board[positionX][positionY] += 1;
			// System.out.println(board[positionX][positionY]); // Test
			return true;
		} else
			return false;
	}

	public boolean hasWon() {

		for (int i = 0; i < workers.length; i++) {
			int posX = workers[i].getPositionX();
			int posY = workers[i].getPositionY();
			if (board[posX][posY] == 3)
				return true;
		}

		return false;
	}

	public boolean isTrapped(int i) {
		for (int x = 0; x < board.length; x++) {
			for (int y = 0; y < board[x].length; y++)
				if (workers[i].move(x, y, game)) {
					return false;
				}
		}
		return true;
	}

	public void reset() {
		board = new int[5][5];

		for (int row = 0; row < board.length; row++) {
			for (int col = 0; col < board[row].length; col++)
				board[row][col] = 0;
		}

		workers = new Worker[4];

		workers[0] = new Worker("w11");
		workers[1] = new Worker("w12");
		workers[2] = new Worker("w21");
		workers[3] = new Worker("w22");
	}
	/*
	 * public Worker accessWorker(int i) { return workers[i]; } Used for testing
	 * worker names
	 */
}
